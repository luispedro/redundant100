#include <algorithm>
#include <stdlib.h>
#include <stdio.h>
#include <stdint.h>
#include <vector>
#include <cstring>
#include <iostream>
#include <sstream>
#include <unordered_map>



static const uint64_t hash0 = 0;
static const uint64_t hash8[] = {
 9500514830699277030ULL, 14478430058364912793ULL, 5475998190937965401ULL, 7624200594592030974ULL, 15009460848216803030ULL, 6389105156167320271ULL,
 18441117592457556219ULL, 15642107930188812694ULL, 12740178482041212977ULL, 15684538367533127958ULL, 8926426149937545710ULL, 2338396044873990761ULL,
 14771902185307135797ULL, 13264766869694282515ULL, 6045519973703685355ULL, 3083948859584282496ULL, 1457559084049579671ULL, 5930189240902606857ULL,
 870519245627253250ULL, 4462052888688229454ULL, 191815745574903993ULL, 11903414619901391455ULL, 11727812422944757080ULL, 1269406778347126253ULL,
 15998855849663127830ULL, 8393838932765003498ULL, 14762962132528121810ULL, 18219895165183247326ULL, 16533303768288047797ULL, 85097248796741531ULL,
 410277522747002276ULL, 17928095439243872671ULL, 15622356009269801052ULL, 7169388131474323899ULL, 16940865941294561738ULL, 14237175016037736734ULL,
 17827926089700543940ULL, 13394333370879980210ULL, 8365474295309962641ULL, 7195194656684355717ULL, 6420704835050947958ULL, 3882595584769580796ULL,
 6274938662942099642ULL, 9458989032881914985ULL, 7880412838516310573ULL, 7546046290046923985ULL, 11430819016910127831ULL, 2625192554458255301ULL,
 1962139780852365426ULL, 14436484115471517676ULL, 1899590106343018035ULL, 6029017667087537934ULL, 6074321841245937458ULL, 17904958046105460756ULL,
 12540328364125410285ULL, 11081655182743446725ULL, 14901534198199156731ULL, 11322322183866435649ULL, 18406614367193509774ULL, 3360167739402781549ULL,
 925361933624796548ULL, 15237385593036964626ULL, 12265913749666666610ULL, 5080459173836116447ULL, 8078074027379977720ULL, 6911806877851466053ULL,
 4642990625734696547ULL, 15398823370945195303ULL, 7866211193936328770ULL, 11818210170543189683ULL, 1001886154452850075ULL, 6292769360879455103ULL,
 13532284662138770296ULL, 16524791927921440899ULL, 16317138762070759128ULL, 5245156148315724158ULL, 3097748128826464437ULL, 7244015920825117125ULL,
 11286739005130425738ULL, 6962004855520570371ULL, 10253245250890538492ULL, 6847564388132021726ULL, 14082786902126823205ULL, 5793990675770984038ULL,
 7027117957116303596ULL, 13116872285497922729ULL, 14109110319109965700ULL, 13823322679274856858ULL, 13069867890039363840ULL, 147942074856336100ULL,
 5245339324645023356ULL, 12140942771732569528ULL, 6907401848172852737ULL, 14357698522908149805ULL, 16787312984472793331ULL, 6388527199101643220ULL,
 10291329600600348099ULL, 4282391516385830059ULL, 14786685944771058405ULL, 10702790283523343223ULL, 8693432648425811849ULL, 14164384572113824741ULL,
 8529572394667220568ULL, 13360249940784187743ULL, 7666652751264705772ULL, 232648290071156928ULL, 1563130283042714463ULL, 7441678105307404078ULL,
 9643111585517183405ULL, 10731130690684784441ULL, 2093356038204611246ULL, 2215462090274908186ULL, 2893181046657629146ULL, 3773555486441642087ULL,
 2298589703496497424ULL, 4708765815642767920ULL, 4587584140152198695ULL, 15499645202918514493ULL, 8390102628668347132ULL, 18110499191208973006ULL,
 2633284928256471186ULL, 12848535874111893296ULL, 2422011268628645742ULL, 2818993246680203275ULL, 1826625082824332109ULL, 18100080556869136616ULL,
 1226328544818089633ULL, 8385870463680778347ULL, 11071641508705418268ULL, 1587422367830252719ULL, 7696713076100367262ULL, 6105831358054263977ULL,
 929329693671641246ULL, 15641035492054849779ULL, 12063656172135103766ULL, 7599096217785353011ULL, 3671076276680339896ULL, 11461131025805838997ULL,
 12651348006325924540ULL, 9313085477043301931ULL, 11436608907505903890ULL, 499876177625798718ULL, 8772236708288828316ULL, 12202678818225342015ULL,
 3055510532846225706ULL, 8518529862577512831ULL, 16588883255681132563ULL, 16692267770707729856ULL, 14441755696608686174ULL, 12863553652539895920ULL,
 9579641677361790295ULL, 17076685085105159968ULL, 6993749144297397373ULL, 5119635826259591586ULL, 11728389174804082600ULL, 15931714724494098231ULL,
 8358833071956779015ULL, 11665986513756949469ULL, 6032389331024009400ULL, 17688491799502138491ULL, 10962564482897076612ULL, 1209179395836295124ULL,
 11934095944956138704ULL, 16522618356194473146ULL, 12560860520674576649ULL, 10025260171884867415ULL, 521139671789152458ULL, 2272407426670456811ULL,
 5699415091704243224ULL, 8900214064280321596ULL, 4968601286103132944ULL, 6974407590623971293ULL, 4388922621761228934ULL, 500576111568551964ULL,
 3252771761011972699ULL, 9739261630835269035ULL, 10376447719058200659ULL, 12015093549766946107ULL, 5002819766980710372ULL, 4576626500488409632ULL,
 6145863787462695426ULL, 17892667896400767238ULL, 17905731519165087714ULL, 12473058868733933486ULL, 3715635057894518929ULL, 8748777864909075310ULL,
 10051451801855683909ULL, 1469318722920344171ULL, 1474618170327597483ULL, 16851108282887418799ULL, 15614531836774421486ULL, 7120524625260931933ULL,
 692606843046927590ULL, 12043736386941474243ULL, 6968626744858556008ULL, 11707004989346247625ULL, 9779391867963964823ULL, 14723102455402089566ULL,
 11381570846382797829ULL, 15334257992951337635ULL, 526930684396893818ULL, 7362144726834218559ULL, 16246781423819608350ULL, 6934619055339027748ULL,
 1747120681392596315ULL, 13725099895669661101ULL, 2597748241528058876ULL, 6838638887852635366ULL, 14464392985216828846ULL, 15633034287276951431ULL,
 17933003326157541046ULL, 3979758093987441028ULL, 16636027463187911318ULL, 4968892912584085039ULL, 18074832298958267576ULL, 1180290621018036665ULL,
 9466286528482500605ULL, 7667556245236151965ULL, 11546037644998404100ULL, 3288784030840230834ULL, 13057504296680298945ULL, 8214019483773522583ULL,
 5298218069071078526ULL, 9446081649308885777ULL, 1163990934617599132ULL, 7446139900602031581ULL, 17749395101427129083ULL, 4681632553539739213ULL,
 6735947831871608848ULL, 14883867459772936768ULL, 8827773120446508810ULL, 10066213943156522199ULL, 10256118081766969598ULL, 4120692917607911124ULL,
 15121474290497544280ULL, 9401016560453584572ULL, 11284845072667533955ULL, 5919655777125939366ULL, 4366706624682943775ULL, 16792774723158826807ULL,
 2848760740139833529ULL, 16535302204321626304ULL, 16846020875485347342ULL, 9085261194011343348ULL, 2313567038150627704ULL, 171586936636335814ULL,
 1436085244137652348ULL, 9841677663128434517ULL, 13286645925681549782ULL, 15394481243391698604ULL, 2925230850336533286ULL, 3842174860857429961ULL,
 406607388048326633ULL, 5809996587542008338ULL, 17131939028413721386ULL, 2771536858083382320ULL};

static uint64_t hashCombine(uint64_t a, uint64_t b) {
    return ((a << 1) | (a >> 63)) ^ b;
}

static uint64_t rotateL(uint64_t x, int n) {
    n %= 64;
    return (x << n) | (x >> (64-n));
}
extern "C"
int rollhash(const unsigned char* seq, const int len, const int n, uint64_t* out) {
    uint64_t cur = hash0;
    for (int i = 0 ; i != n - 1; ++i) {
        cur = hashCombine(cur, hash8[seq[i]]);
    }
    for (int i = n-1; i < len; ++i) {
        const uint64_t ck = hash8[seq[i]];
        const uint64_t cl = (i == n - 1 ? hash0 : hash8[seq[i-n]]);
        cur = hashCombine(cur, rotateL(cl, n) ^ ck);
        out[i - n + 1] = cur;
    }

}

struct Fasta {
   Fasta(std::string h, std::string s)
      :header(h)
      ,seq(s)
   { }
   std::string header;
   std::string seq;
};

typedef std::unordered_multimap<uint64_t, Fasta> hash_type;
static void find_matches(const hash_type& h, const uint64_t key, const std::string& header, const std::string& seq, std::ostringstream& out) {
   auto r = h.equal_range(key);
   auto candidate = r.first;
   auto end = r.second;
   for (; candidate != end; ++candidate) {
      if (seq.find(candidate->second.seq) != std::string::npos) {
         out << candidate->second.header << "\tC\t" << header << "\n";
      }
   }
}

extern "C" void* init_hash() {
   return new hash_type;
}

extern "C" void destroy_hash(void* h) {
    delete reinterpret_cast<hash_type*>(h);
}

extern "C" void insert_hash(void * h, uint64_t* keys, const int n_keys, const char* header, const char* s) {
   hash_type& ha = *reinterpret_cast<hash_type*>(h);
   for (int i = 0; i < n_keys; ++i) {
        const uint64_t key = keys[i];
        if (!ha.count(key)) {
            ha.emplace(key, Fasta(header, s));
            return;
        }
    }
    ha.emplace(keys[0], Fasta(header, s));
}

extern "C" char* write_matches(const void* h, const int n, const char* header_p, const int header_n, const char* seq_p, const int seq_n) {
   //std::cerr << "write_matches (" << h << ", " << header << ")\n";
   std::ostringstream out;
   const std::string header(header_p, header_n);
   const std::string seq(seq_p, seq_n);

   std::vector<uint64_t> hs;
   hs.resize(seq_n - n + 1);
   rollhash(reinterpret_cast<const unsigned char*>(seq_p), seq_n, n, hs.data());
   std::sort(hs.begin(), hs.end());
   auto past = std::unique(hs.begin(), hs.end());
   for (auto k = hs.begin(); k != past; ++k) {
      find_matches(*reinterpret_cast<const hash_type*>(h), *k, header, seq, out);
   }
   return strdup(out.str().c_str());
}

